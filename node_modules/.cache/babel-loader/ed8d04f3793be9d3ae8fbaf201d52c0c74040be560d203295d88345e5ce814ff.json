{"ast":null,"code":"var _jsxFileName = \"/Users/aaronweiss/Desktop/tcm app build 2/tcm-app/src/components/Survey.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport { fetchQuestions, submitAnswers } from '../utils/api'; // Ensure these functions align with your backend\nimport { useNavigate } from 'react-router-dom'; // For redirecting after submission\nimport UserContext from '../context/UserContext'; // Import UserContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Survey() {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [responses, setResponses] = useState([]);\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n  const {\n    user\n  } = useContext(UserContext); // Access user from context\n\n  useEffect(() => {\n    async function loadQuestions() {\n      try {\n        console.log('Fetching questions...');\n        const data = await fetchQuestions();\n        if (!data || data.length === 0) {\n          setError('No questions available at the moment.');\n          return;\n        }\n        console.log('Fetched questions:', data);\n        setQuestions(data);\n        setResponses(Array(data.length).fill(false));\n      } catch (err) {\n        setError('Failed to load questions. Please try again later.');\n        console.error('Error fetching questions:', err.message || err);\n      }\n    }\n    loadQuestions();\n  }, []);\n  const handleResponseChange = (index, value) => {\n    console.log(`Changing response for question at index ${index} to ${value}`);\n    const updatedResponses = [...responses];\n    updatedResponses[index] = value;\n    setResponses(updatedResponses);\n    console.log('Updated responses state:', updatedResponses);\n  };\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const handleSubmit = async () => {\n    if (isSubmitting) return;\n    try {\n      setIsSubmitting(true);\n      if (!(user !== null && user !== void 0 && user.id)) {\n        setError('User not authenticated. Please log in.');\n        return;\n      }\n      console.log('Preparing answers for submission...');\n      const answers = questions.map((q, index) => ({\n        bitPosition: q.bit_position,\n        isTrue: responses[index]\n      }));\n      console.log('Prepared answers:', answers);\n      const submissionId = await submitAnswers(user.id, answers);\n      console.log('Submission successful, Submission ID:', submissionId);\n      navigate(`/treatment-plan/${submissionId}`);\n    } catch (err) {\n      setError('Failed to submit survey. Please try again later.');\n      console.error('Error submitting survey:', err.message || err);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"survey\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"New Survey\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: questions.map((q, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: q.question_text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: responses[index],\n          onChange: e => handleResponseChange(index, e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)]\n      }, q.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(Survey, \"OBd8RhZf9z5VPmU1KsLX8jd5lCQ=\", false, function () {\n  return [useNavigate];\n});\n_c = Survey;\nexport default Survey;\nvar _c;\n$RefreshReg$(_c, \"Survey\");","map":{"version":3,"names":["React","useState","useEffect","useContext","fetchQuestions","submitAnswers","useNavigate","UserContext","jsxDEV","_jsxDEV","Survey","_s","questions","setQuestions","responses","setResponses","error","setError","navigate","user","loadQuestions","console","log","data","length","Array","fill","err","message","handleResponseChange","index","value","updatedResponses","isSubmitting","setIsSubmitting","handleSubmit","id","answers","map","q","bitPosition","bit_position","isTrue","submissionId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","question_text","type","checked","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/aaronweiss/Desktop/tcm app build 2/tcm-app/src/components/Survey.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { fetchQuestions, submitAnswers } from '../utils/api'; // Ensure these functions align with your backend\nimport { useNavigate } from 'react-router-dom'; // For redirecting after submission\nimport UserContext from '../context/UserContext'; // Import UserContext\n\nfunction Survey() {\n  const [questions, setQuestions] = useState([]);\n  const [responses, setResponses] = useState([]);\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n  const { user } = useContext(UserContext); // Access user from context\n\n  useEffect(() => {\n    async function loadQuestions() {\n      try {\n        console.log('Fetching questions...');\n        const data = await fetchQuestions();\n        if (!data || data.length === 0) {\n          setError('No questions available at the moment.');\n          return;\n        }\n        console.log('Fetched questions:', data);\n        setQuestions(data);\n        setResponses(Array(data.length).fill(false));\n      } catch (err) {\n        setError('Failed to load questions. Please try again later.');\n        console.error('Error fetching questions:', err.message || err);\n      }\n    }\n    loadQuestions();\n  }, []);\n  \n\n  const handleResponseChange = (index, value) => {\n    console.log(`Changing response for question at index ${index} to ${value}`);\n    const updatedResponses = [...responses];\n    updatedResponses[index] = value;\n    setResponses(updatedResponses);\n    console.log('Updated responses state:', updatedResponses);\n  };\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\nconst handleSubmit = async () => {\n  if (isSubmitting) return;\n\n  try {\n    setIsSubmitting(true);\n    if (!user?.id) {\n      setError('User not authenticated. Please log in.');\n      return;\n    }\n\n    console.log('Preparing answers for submission...');\n    const answers = questions.map((q, index) => ({\n      bitPosition: q.bit_position,\n      isTrue: responses[index],\n    }));\n    console.log('Prepared answers:', answers);\n\n    const submissionId = await submitAnswers(user.id, answers);\n    console.log('Submission successful, Submission ID:', submissionId);\n\n    navigate(`/treatment-plan/${submissionId}`);\n  } catch (err) {\n    setError('Failed to submit survey. Please try again later.');\n    console.error('Error submitting survey:', err.message || err);\n  } finally {\n    setIsSubmitting(false);\n  }\n};\n\n  \n\n  return (\n    <div className=\"survey\">\n      <h2>New Survey</h2>\n      {error && <p className=\"error-message\">{error}</p>}\n      <form>\n        {questions.map((q, index) => (\n          <div key={q.id}>\n            <label>{q.question_text}</label>\n            <input\n              type=\"checkbox\"\n              checked={responses[index]}\n              onChange={(e) => handleResponseChange(index, e.target.checked)}\n            />\n          </div>\n        ))}\n      </form>\n      <button onClick={handleSubmit}>Submit</button>\n    </div>\n  );\n}\n\nexport default Survey;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}