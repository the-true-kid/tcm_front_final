{"ast":null,"code":"const API_BASE_URL = 'http://localhost:5000';\n\n// Fetches the list of questions\nexport const fetchQuestions = async () => {\n  try {\n    console.log('Fetching questions...');\n    const response = await fetch(`${API_BASE_URL}/questions`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch questions: ${response.statusText}`);\n    }\n    const data = await response.json();\n    console.log('Fetched questions:', data);\n    return data;\n  } catch (error) {\n    console.error('Error fetching questions:', error);\n    throw error;\n  }\n};\n\n// Submits answers and calculates the bitmask\nexport const submitAnswers = async (userId, answers) => {\n  try {\n    console.log('Submitting answers for userId:', userId, 'Answers:', answers);\n    const response = await fetch(`${API_BASE_URL}/answers`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId,\n        answers\n      })\n    });\n    if (!response.ok) {\n      const errorDetails = await response.json();\n      console.error('Backend error details:', errorDetails);\n      throw new Error(`Failed to submit answers: ${response.statusText}`);\n    }\n    const result = await response.json();\n    console.log('Response from backend after submitting answers:', result);\n    if (!result.submissionId || typeof result.submissionId !== 'number') {\n      console.error('Invalid submissionId received from backend:', result.submissionId);\n      throw new Error('Invalid submissionId received from backend');\n    }\n    return result.submissionId; // Return the validated submissionId\n  } catch (error) {\n    console.error('Error submitting answers:', error);\n    throw error;\n  }\n};\n\n// Fetches diagnosis results for a given submissionId\nexport const fetchDiagnosisResults = async submissionId => {\n  try {\n    console.log('Fetching diagnosis results for submissionId:', submissionId);\n    const response = await fetch(`${API_BASE_URL}/diagnosis/${submissionId}`);\n    if (!response.ok) {\n      const errorDetails = await response.json();\n      console.error('Backend error details:', errorDetails);\n      throw new Error(`Failed to fetch diagnosis results: ${response.statusText}`);\n    }\n    const data = await response.json();\n    console.log('Fetched diagnosis results:', data);\n    return data;\n  } catch (error) {\n    console.error('Error fetching diagnosis results:', error);\n    throw error;\n  }\n};\n\n// Fetches treatment plan for a given submissionId\nexport const fetchTreatmentPlan = async submissionId => {\n  try {\n    console.log('Fetching treatment plan with submissionId:', submissionId);\n    if (!submissionId || typeof submissionId !== 'number') {\n      console.error('Invalid submissionId provided to fetchTreatmentPlan:', submissionId);\n      throw new Error('Invalid submissionId provided');\n    }\n    const response = await fetch(`${API_BASE_URL}/treatment-plans/${submissionId}`);\n    if (!response.ok) {\n      const errorDetails = await response.json();\n      console.error('Backend error details:', errorDetails);\n      throw new Error(`Failed to fetch treatment plan: ${response.statusText}`);\n    }\n    const result = await response.json();\n    console.log('Fetched treatment plan:', result);\n    return result;\n  } catch (error) {\n    console.error('Error fetching treatment plan:', error);\n    throw error;\n  }\n};\nexport const fetchUserDetails = async userId => {\n  try {\n    console.log(`Fetching user details for userId: ${userId}`);\n    const response = await fetch(`${API_BASE_URL}/users/${userId}/details`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch user details: ${response.statusText}`);\n    }\n    const data = await response.json();\n    console.log('Fetched user details:', data);\n    return data;\n  } catch (error) {\n    console.error('Error fetching user details:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","fetchQuestions","console","log","response","fetch","ok","Error","statusText","data","json","error","submitAnswers","userId","answers","method","headers","body","JSON","stringify","errorDetails","result","submissionId","fetchDiagnosisResults","fetchTreatmentPlan","fetchUserDetails"],"sources":["/Users/aaronweiss/Desktop/tcm app build 2/tcm-app/src/utils/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:5000';\n\n// Fetches the list of questions\nexport const fetchQuestions = async () => {\n  try {\n    console.log('Fetching questions...');\n    const response = await fetch(`${API_BASE_URL}/questions`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch questions: ${response.statusText}`);\n    }\n    const data = await response.json();\n    console.log('Fetched questions:', data);\n    return data;\n  } catch (error) {\n    console.error('Error fetching questions:', error);\n    throw error;\n  }\n};\n\n// Submits answers and calculates the bitmask\nexport const submitAnswers = async (userId, answers) => {\n  try {\n    console.log('Submitting answers for userId:', userId, 'Answers:', answers);\n    const response = await fetch(`${API_BASE_URL}/answers`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ userId, answers }),\n    });\n\n    if (!response.ok) {\n      const errorDetails = await response.json();\n      console.error('Backend error details:', errorDetails);\n      throw new Error(`Failed to submit answers: ${response.statusText}`);\n    }\n\n    const result = await response.json();\n    console.log('Response from backend after submitting answers:', result);\n\n    if (!result.submissionId || typeof result.submissionId !== 'number') {\n      console.error('Invalid submissionId received from backend:', result.submissionId);\n      throw new Error('Invalid submissionId received from backend');\n    }\n\n    return result.submissionId; // Return the validated submissionId\n  } catch (error) {\n    console.error('Error submitting answers:', error);\n    throw error;\n  }\n};\n\n// Fetches diagnosis results for a given submissionId\nexport const fetchDiagnosisResults = async (submissionId) => {\n  try {\n    console.log('Fetching diagnosis results for submissionId:', submissionId);\n    const response = await fetch(`${API_BASE_URL}/diagnosis/${submissionId}`);\n    if (!response.ok) {\n      const errorDetails = await response.json();\n      console.error('Backend error details:', errorDetails);\n      throw new Error(`Failed to fetch diagnosis results: ${response.statusText}`);\n    }\n    const data = await response.json();\n    console.log('Fetched diagnosis results:', data);\n    return data;\n  } catch (error) {\n    console.error('Error fetching diagnosis results:', error);\n    throw error;\n  }\n};\n\n\n// Fetches treatment plan for a given submissionId\nexport const fetchTreatmentPlan = async (submissionId) => {\n  try {\n    console.log('Fetching treatment plan with submissionId:', submissionId);\n\n    if (!submissionId || typeof submissionId !== 'number') {\n      console.error('Invalid submissionId provided to fetchTreatmentPlan:', submissionId);\n      throw new Error('Invalid submissionId provided');\n    }\n\n    const response = await fetch(`${API_BASE_URL}/treatment-plans/${submissionId}`);\n    if (!response.ok) {\n      const errorDetails = await response.json();\n      console.error('Backend error details:', errorDetails);\n      throw new Error(`Failed to fetch treatment plan: ${response.statusText}`);\n    }\n\n    const result = await response.json();\n    console.log('Fetched treatment plan:', result);\n    return result;\n  } catch (error) {\n    console.error('Error fetching treatment plan:', error);\n    throw error;\n  }\n};\n\nexport const fetchUserDetails = async (userId) => {\n  try {\n    console.log(`Fetching user details for userId: ${userId}`);\n    const response = await fetch(`${API_BASE_URL}/users/${userId}/details`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch user details: ${response.statusText}`);\n    }\n    const data = await response.json();\n    console.log('Fetched user details:', data);\n    return data;\n  } catch (error) {\n    console.error('Error fetching user details:', error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}