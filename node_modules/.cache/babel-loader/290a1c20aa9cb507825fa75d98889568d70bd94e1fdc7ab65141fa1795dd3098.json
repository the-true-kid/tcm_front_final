{"ast":null,"code":"var _jsxFileName = \"/Users/aaronweiss/Desktop/tcm app build 2/tcm-app/src/components/Survey.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchQuestions, submitAnswers } from '../utils/api'; // Ensure these functions align with your backend\nimport { useNavigate } from 'react-router-dom'; // Optional for redirecting after submission\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Survey({\n  userId\n}) {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [responses, setResponses] = useState([]);\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n  useEffect(() => {\n    async function loadQuestions() {\n      try {\n        console.log('Fetching questions...');\n        const data = await fetchQuestions();\n        console.log('Fetched questions:', data);\n        setQuestions(data);\n        setResponses(Array(data.length).fill(false)); // Initialize responses with false values\n        console.log('Initialized responses state:', Array(data.length).fill(false));\n      } catch (err) {\n        setError('Failed to load questions. Please try again later.');\n        console.error('Error fetching questions:', err);\n      }\n    }\n    loadQuestions();\n  }, []);\n  const handleResponseChange = (index, value) => {\n    console.log(`Changing response for question at index ${index} to ${value}`);\n    const updatedResponses = [...responses];\n    updatedResponses[index] = value;\n    setResponses(updatedResponses);\n    console.log('Updated responses state:', updatedResponses);\n  };\n  const handleSubmit = async () => {\n    try {\n      if (!userId) {\n        console.error('User ID is missing!');\n        setError('User ID is required to submit the survey.');\n        return;\n      }\n      console.log('Preparing answers for submission...');\n      const answers = questions.map((q, index) => ({\n        bitPosition: q.bit_position,\n        isTrue: responses[index]\n      }));\n      console.log('Prepared answers:', answers);\n      console.log(`Submitting answers for user ID ${userId}...`);\n      const submissionId = await submitAnswers(userId, answers);\n      console.log('Submission successful, Submission ID:', submissionId);\n      alert('Survey submitted successfully!');\n      console.log('Navigating to results page:', `/results/${submissionId}`);\n      navigate(`/results/${submissionId}`);\n    } catch (err) {\n      setError('Failed to submit survey. Please try again later.');\n      console.error('Error submitting survey:', err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"survey\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"New Survey\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: questions.map((q, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: q.question_text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: responses[index],\n          onChange: e => handleResponseChange(index, e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)]\n      }, q.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(Survey, \"Km3iKeaUsIyXrPBYayvV0IW5nmE=\", false, function () {\n  return [useNavigate];\n});\n_c = Survey;\nexport default Survey;\nvar _c;\n$RefreshReg$(_c, \"Survey\");","map":{"version":3,"names":["React","useState","useEffect","fetchQuestions","submitAnswers","useNavigate","jsxDEV","_jsxDEV","Survey","userId","_s","questions","setQuestions","responses","setResponses","error","setError","navigate","loadQuestions","console","log","data","Array","length","fill","err","handleResponseChange","index","value","updatedResponses","handleSubmit","answers","map","q","bitPosition","bit_position","isTrue","submissionId","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","question_text","type","checked","onChange","e","target","id","onClick","_c","$RefreshReg$"],"sources":["/Users/aaronweiss/Desktop/tcm app build 2/tcm-app/src/components/Survey.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetchQuestions, submitAnswers } from '../utils/api'; // Ensure these functions align with your backend\nimport { useNavigate } from 'react-router-dom'; // Optional for redirecting after submission\n\nfunction Survey({ userId }) {\n  const [questions, setQuestions] = useState([]);\n  const [responses, setResponses] = useState([]);\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    async function loadQuestions() {\n      try {\n        console.log('Fetching questions...');\n        const data = await fetchQuestions();\n        console.log('Fetched questions:', data);\n        setQuestions(data);\n        setResponses(Array(data.length).fill(false)); // Initialize responses with false values\n        console.log('Initialized responses state:', Array(data.length).fill(false));\n      } catch (err) {\n        setError('Failed to load questions. Please try again later.');\n        console.error('Error fetching questions:', err);\n      }\n    }\n    loadQuestions();\n  }, []);\n\n  const handleResponseChange = (index, value) => {\n    console.log(`Changing response for question at index ${index} to ${value}`);\n    const updatedResponses = [...responses];\n    updatedResponses[index] = value;\n    setResponses(updatedResponses);\n    console.log('Updated responses state:', updatedResponses);\n  };\n\n  const handleSubmit = async () => {\n    try {\n      if (!userId) {\n        console.error('User ID is missing!');\n        setError('User ID is required to submit the survey.');\n        return;\n      }\n\n      console.log('Preparing answers for submission...');\n      const answers = questions.map((q, index) => ({\n        bitPosition: q.bit_position,\n        isTrue: responses[index],\n      }));\n      console.log('Prepared answers:', answers);\n\n      console.log(`Submitting answers for user ID ${userId}...`);\n      const submissionId = await submitAnswers(userId, answers);\n      console.log('Submission successful, Submission ID:', submissionId);\n\n      alert('Survey submitted successfully!');\n      console.log('Navigating to results page:', `/results/${submissionId}`);\n      navigate(`/results/${submissionId}`);\n    } catch (err) {\n      setError('Failed to submit survey. Please try again later.');\n      console.error('Error submitting survey:', err);\n    }\n  };\n\n  return (\n    <div className=\"survey\">\n      <h2>New Survey</h2>\n      {error && <p className=\"error-message\">{error}</p>}\n      <form>\n        {questions.map((q, index) => (\n          <div key={q.id}>\n            <label>{q.question_text}</label>\n            <input\n              type=\"checkbox\"\n              checked={responses[index]}\n              onChange={(e) => handleResponseChange(index, e.target.checked)}\n            />\n          </div>\n        ))}\n      </form>\n      <button onClick={handleSubmit}>Submit</button>\n    </div>\n  );\n}\n\nexport default Survey;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}