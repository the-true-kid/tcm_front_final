{"ast":null,"code":"var _jsxFileName = \"/Users/aaronweiss/Desktop/tcm app build 2/tcm-app/src/components/Survey.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchQuestions, submitAnswers } from '../utils/api'; // Ensure these functions align with your backend\nimport { useNavigate } from 'react-router-dom'; // Optional for redirecting after submission\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Survey({\n  userId\n}) {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [responses, setResponses] = useState([]);\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n  useEffect(() => {\n    async function loadQuestions() {\n      try {\n        const data = await fetchQuestions();\n        setQuestions(data);\n        setResponses(Array(data.length).fill(false)); // Initialize responses\n      } catch (err) {\n        setError('Failed to load questions. Please try again later.');\n        console.error('Error fetching questions:', err);\n      }\n    }\n    loadQuestions();\n  }, []);\n  const handleResponseChange = (index, value) => {\n    const updatedResponses = [...responses];\n    updatedResponses[index] = value;\n    setResponses(updatedResponses);\n  };\n  const handleSubmit = async () => {\n    try {\n      const answers = questions.map((q, index) => ({\n        bitPosition: q.bit_position,\n        isTrue: responses[index]\n      }));\n      const submissionId = await submitAnswers(userId, answers); // Ensure `submitAnswers` returns `submissionId`\n      alert('Survey submitted successfully!');\n\n      // Optionally, redirect to a results page or another route\n      navigate(`/results/${submissionId}`);\n    } catch (err) {\n      setError('Failed to submit survey. Please try again later.');\n      console.error('Error submitting survey:', err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"survey\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"New Survey\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: questions.map((q, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: q.question_text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: responses[index],\n          onChange: e => handleResponseChange(index, e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)]\n      }, q.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(Survey, \"Km3iKeaUsIyXrPBYayvV0IW5nmE=\", false, function () {\n  return [useNavigate];\n});\n_c = Survey;\nexport default Survey;\nvar _c;\n$RefreshReg$(_c, \"Survey\");","map":{"version":3,"names":["React","useState","useEffect","fetchQuestions","submitAnswers","useNavigate","jsxDEV","_jsxDEV","Survey","userId","_s","questions","setQuestions","responses","setResponses","error","setError","navigate","loadQuestions","data","Array","length","fill","err","console","handleResponseChange","index","value","updatedResponses","handleSubmit","answers","map","q","bitPosition","bit_position","isTrue","submissionId","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","question_text","type","checked","onChange","e","target","id","onClick","_c","$RefreshReg$"],"sources":["/Users/aaronweiss/Desktop/tcm app build 2/tcm-app/src/components/Survey.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetchQuestions, submitAnswers } from '../utils/api'; // Ensure these functions align with your backend\nimport { useNavigate } from 'react-router-dom'; // Optional for redirecting after submission\n\nfunction Survey({ userId }) {\n  const [questions, setQuestions] = useState([]);\n  const [responses, setResponses] = useState([]);\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    async function loadQuestions() {\n      try {\n        const data = await fetchQuestions();\n        setQuestions(data);\n        setResponses(Array(data.length).fill(false)); // Initialize responses\n      } catch (err) {\n        setError('Failed to load questions. Please try again later.');\n        console.error('Error fetching questions:', err);\n      }\n    }\n    loadQuestions();\n  }, []);\n\n  const handleResponseChange = (index, value) => {\n    const updatedResponses = [...responses];\n    updatedResponses[index] = value;\n    setResponses(updatedResponses);\n  };\n\n  const handleSubmit = async () => {\n    try {\n      const answers = questions.map((q, index) => ({\n        bitPosition: q.bit_position,\n        isTrue: responses[index],\n      }));\n\n      const submissionId = await submitAnswers(userId, answers); // Ensure `submitAnswers` returns `submissionId`\n      alert('Survey submitted successfully!');\n\n      // Optionally, redirect to a results page or another route\n      navigate(`/results/${submissionId}`);\n    } catch (err) {\n      setError('Failed to submit survey. Please try again later.');\n      console.error('Error submitting survey:', err);\n    }\n  };\n\n  return (\n    <div className=\"survey\">\n      <h2>New Survey</h2>\n      {error && <p className=\"error-message\">{error}</p>}\n      <form>\n        {questions.map((q, index) => (\n          <div key={q.id}>\n            <label>{q.question_text}</label>\n            <input\n              type=\"checkbox\"\n              checked={responses[index]}\n              onChange={(e) => handleResponseChange(index, e.target.checked)}\n            />\n          </div>\n        ))}\n      </form>\n      <button onClick={handleSubmit}>Submit</button>\n    </div>\n  );\n}\n\nexport default Survey;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}