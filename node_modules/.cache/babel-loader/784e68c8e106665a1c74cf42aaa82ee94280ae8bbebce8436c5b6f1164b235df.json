{"ast":null,"code":"const API_BASE_URL = 'http://localhost:5000';\n\n// Fetches the list of questions\nexport const fetchQuestions = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/questions`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch questions: ${response.statusText}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching questions:', error);\n    throw error;\n  }\n};\n\n// Submits answers and calculates the bitmask\nexport const submitAnswers = async (userId, answers) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/answers`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId,\n        answers\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to submit answers: ${response.statusText}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Error submitting answers:', error);\n    throw error;\n  }\n};\n\n// Fetches diagnosis results for a given submissionId\nexport const fetchDiagnosisResults = async submissionId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/diagnosis/${submissionId}`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch diagnosis results: ${response.statusText}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching diagnosis results:', error);\n    throw error;\n  }\n};\n\n// Fetches treatment plan for a given submissionId\nexport const fetchTreatmentPlan = async submissionId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/treatment-plan/${submissionId}`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch treatment plan: ${response.statusText}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching treatment plan:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","fetchQuestions","response","fetch","ok","Error","statusText","json","error","console","submitAnswers","userId","answers","method","headers","body","JSON","stringify","fetchDiagnosisResults","submissionId","fetchTreatmentPlan"],"sources":["/Users/aaronweiss/Desktop/tcm app build 2/tcm-app/src/utils/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:5000';\n\n// Fetches the list of questions\nexport const fetchQuestions = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/questions`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch questions: ${response.statusText}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching questions:', error);\n    throw error;\n  }\n};\n\n// Submits answers and calculates the bitmask\nexport const submitAnswers = async (userId, answers) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/answers`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ userId, answers }),\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to submit answers: ${response.statusText}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Error submitting answers:', error);\n    throw error;\n  }\n};\n\n// Fetches diagnosis results for a given submissionId\nexport const fetchDiagnosisResults = async (submissionId) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/diagnosis/${submissionId}`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch diagnosis results: ${response.statusText}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching diagnosis results:', error);\n    throw error;\n  }\n};\n\n// Fetches treatment plan for a given submissionId\nexport const fetchTreatmentPlan = async (submissionId) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/treatment-plan/${submissionId}`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch treatment plan: ${response.statusText}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching treatment plan:', error);\n    throw error;\n  }\n};\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,uBAAuB;;AAE5C;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,YAAY,CAAC;IACzD,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8BH,QAAQ,CAACI,UAAU,EAAE,CAAC;IACtE;IACA,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,aAAa,GAAG,MAAAA,CAAOC,MAAM,EAAEC,OAAO,KAAK;EACtD,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,UAAU,EAAE;MACtDa,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEN,MAAM;QAAEC;MAAQ,CAAC;IAC1C,CAAC,CAAC;IACF,IAAI,CAACV,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6BH,QAAQ,CAACI,UAAU,EAAE,CAAC;IACrE;IACA,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMU,qBAAqB,GAAG,MAAOC,YAAY,IAAK;EAC3D,IAAI;IACF,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,cAAcmB,YAAY,EAAE,CAAC;IACzE,IAAI,CAACjB,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,sCAAsCH,QAAQ,CAACI,UAAU,EAAE,CAAC;IAC9E;IACA,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMY,kBAAkB,GAAG,MAAOD,YAAY,IAAK;EACxD,IAAI;IACF,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,mBAAmBmB,YAAY,EAAE,CAAC;IAC9E,IAAI,CAACjB,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,mCAAmCH,QAAQ,CAACI,UAAU,EAAE,CAAC;IAC3E;IACA,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}