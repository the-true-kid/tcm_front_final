{"ast":null,"code":"var _jsxFileName = \"/Users/aaronweiss/Desktop/tcm app build 2/tcm-app/src/components/DiagnosisResults.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { fetchDiagnosisResults } from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DiagnosisResults() {\n  _s();\n  const {\n    submissionId\n  } = useParams(); // Use submissionId dynamically from the route\n  const [results, setResults] = useState([]);\n  const [error, setError] = useState('');\n  const navigate = useNavigate(); // For navigation\n\n  useEffect(() => {\n    async function loadResults() {\n      try {\n        console.log(`Fetching diagnosis results for submissionId: ${submissionId}`);\n        const data = await fetchDiagnosisResults(submissionId);\n        console.log('Fetched diagnosis results:', data);\n        setResults(data);\n      } catch (err) {\n        console.error('Error fetching diagnosis results:', err);\n        setError('Failed to load diagnosis results. Please try again.');\n      }\n    }\n    loadResults();\n  }, [submissionId]);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 12\n    }, this);\n  }\n  if (!results.length) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading diagnosis results...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"diagnosis-results\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Diagnosis Results for Submission ID: \", submissionId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: results.map(result => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: result.organ_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this), \": \", result.diagnosis_name, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 75\n        }, this), /*#__PURE__*/_jsxDEV(\"em\", {\n          children: result.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)]\n      }, result.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate(`/treatment-plan/${submissionId}`),\n      children: \"View Treatment Plan\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(DiagnosisResults, \"8X85b0Smyz6jgPcL5u8tzxSaSZs=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = DiagnosisResults;\nexport default DiagnosisResults;\nvar _c;\n$RefreshReg$(_c, \"DiagnosisResults\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","fetchDiagnosisResults","jsxDEV","_jsxDEV","DiagnosisResults","_s","submissionId","results","setResults","error","setError","navigate","loadResults","console","log","data","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","result","organ_name","diagnosis_name","description","id","onClick","_c","$RefreshReg$"],"sources":["/Users/aaronweiss/Desktop/tcm app build 2/tcm-app/src/components/DiagnosisResults.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { fetchDiagnosisResults } from '../utils/api';\n\nfunction DiagnosisResults() {\n  const { submissionId } = useParams(); // Use submissionId dynamically from the route\n  const [results, setResults] = useState([]);\n  const [error, setError] = useState('');\n  const navigate = useNavigate(); // For navigation\n\n  useEffect(() => {\n    async function loadResults() {\n      try {\n        console.log(`Fetching diagnosis results for submissionId: ${submissionId}`);\n        const data = await fetchDiagnosisResults(submissionId);\n        console.log('Fetched diagnosis results:', data);\n        setResults(data);\n      } catch (err) {\n        console.error('Error fetching diagnosis results:', err);\n        setError('Failed to load diagnosis results. Please try again.');\n      }\n    }\n    loadResults();\n  }, [submissionId]);\n\n  if (error) {\n    return <p className=\"error-message\">{error}</p>;\n  }\n\n  if (!results.length) {\n    return <p>Loading diagnosis results...</p>;\n  }\n\n  return (\n    <div className=\"diagnosis-results\">\n      <h2>Diagnosis Results for Submission ID: {submissionId}</h2>\n      <ul>\n        {results.map((result) => (\n          <li key={result.id}>\n            <strong>{result.organ_name}</strong>: {result.diagnosis_name} <br />\n            <em>{result.description}</em>\n          </li>\n        ))}\n      </ul>\n      <button onClick={() => navigate(`/treatment-plan/${submissionId}`)}>\n        View Treatment Plan\n      </button>\n    </div>\n  );\n}\n\nexport default DiagnosisResults;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}